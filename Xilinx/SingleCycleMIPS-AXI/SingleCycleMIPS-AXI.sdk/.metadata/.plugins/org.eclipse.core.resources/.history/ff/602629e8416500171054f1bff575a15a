/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xtime_l.h"
#define FIB
#define n 10
#include "mips_programs.h"

#define mWriteReg(BaseAddress, RegOffset, Data) \
  	Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define mReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

u32 control = 0x43c00000;
int control_ready = 0,
		control_count = 4,
		control_running = 8,
		control_clocks = 12;
u32 instruction = 0x43c10000;
u32 memory = 0x43c20000;

int main()
{
	//XTime start, end;
	uint size = (sizeof(program) / sizeof(program[0]));
	xil_printf("%d\n", size);
    init_platform();

    if (mReadReg(control, control_running) == 1) print("Running!\n");
    xil_printf("MIPS finished in %d clock ticks\n", mReadReg(control, control_clocks));
    print("Resetting cpu... ");
    mWriteReg(control, control_ready, 1);
    print("Done!\n");
    if (mReadReg(control, control_running) == 1) print("Running!\n");

    print("Verifying that everything is reset... ");
    for (int i = 1; i < 4; i++) {
    	if (mReadReg(control, i*4) != 0) xil_printf("Error control %d not 0\n", i);
    }
    for (int i = 0; i < size; i++) {
    	if (mReadReg(instruction, i*4) != 0) xil_printf("Error instruction %d not 0\n", i);
    }
    print("Done!\n");
    if (mReadReg(control, control_running) == 1) print("Running!\n");

    print("Loading program to FPGA... ");
    for (int i = 0; i < size; i++) {
    	mWriteReg(instruction, i * 4, program[i]);
    }
    print ("Done!\n");
    if (mReadReg(control, control_running) == 1) print("Running!\n");

    print("Verifying program... ");
    for (int i = 0; i < size; i++) {
    	if (mReadReg(instruction, i*4) != program[i])
    		print("Error!");
    }
    print("Done!\n");
    if (mReadReg(control, control_running) == 1) print("Running!\n");

    print("Trying to set instruction count and ready flag, and verify them... ");
    mWriteReg(control, control_count, size << 2);
    mWriteReg(control, control_ready, 0);
    print("Done!\n");
    if (mReadReg(control, control_running) == 1) print("Running!\n");

    print("Waiting for MIPS to finish... ");
    while (mReadReg(control, control_running) == 1 || mReadReg(control, control_clocks) == 0) { }
    print("Done!\n");

    xil_printf("MIPS finished in %d clock ticks\n", mReadReg(control, control_clocks));

    print ("Printing memory...\n[");
    for (int i = 0; i < 20; i++) {
    	xil_printf("%d, ", mReadReg(memory, i * 4));
    }
    print ("]\n");

    cleanup_platform();
    return 0;
}
