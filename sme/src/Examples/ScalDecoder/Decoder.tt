﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# int BitWidth = 8; #>
<# int pow = 256; #>
using System;
using SME;

namespace ScalDecoder 
{
	
<# for (int i = 0; i < BitWidth; i++)
{
#>
		public interface InputN<#Write(""+i);#> : IBus { bool Bit { get; set; } }
<#
}
#>

<# for (int i = 0; i < BitWidth; i++)
{
#>
		public class NOT<#Write(""+i);#> : SimpleProcess
		{
			[InputBus] Input<#Write(""+i);#> input;
			[OutputBus] InputN<#Write(""+i);#> output;

			protected override void OnTick()
			{
				output.Bit = !input.Bit;
			}
		}
<#
}
#>

<# for (int i = 0; i < pow; i++)
{
#>
		public class AND<#Write(""+i);#> : SimpleProcess
		{
<# for (int j = 0; j < BitWidth; j++) 
{
#>
			[InputBus] Input<# if (((i >> j) & 1) == 0) { Write("N"); } Write(""+j);#> input<#Write(""+j);#>;
<#
}
#>
			[OutputBus] Output<#Write(""+i);#> output;

			protected override void OnTick()
			{
				output.Bit = input0.Bit
<# for (int j = 1; j < BitWidth; j++)
{
#>
						   && input<#Write(""+j);#>.Bit
<#
}
#>;
			}
		}
<#
}
#>

	

}
