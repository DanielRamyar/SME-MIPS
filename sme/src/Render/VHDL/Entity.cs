// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.Render.VHDL {
    using System.Linq;
    using SME;
    using SME.Render.VHDL;
    using System.Text;
    using System.Collections.Generic;
    using SME.Render.VHDL.ILConvert;
    using System;
    
    
    public partial class Entity : EntityBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 9 ""
            this.Write("library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.STD_LOGIC_UNSIGNED.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nlibrary SYSTEM_TYPES;\nuse work.SYSTEM_TYPES.ALL;\n\nlibrary CUSTOM_TYPES;\nuse work.CUSTOM_TYPES.ALL;\n\n-- User defined packages here\n-- #### USER-DATA-IMPORTS-START\n-- #### USER-DATA-IMPORTS-END\n\n\nentity ");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( il.ProcessNameToVHDLName() ));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(" is\n  port(\n");
            
            #line default
            #line hidden
            
            #line 27 ""
 foreach (var bus in il.InputOnlyBusses) { 
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write("    -- Input bus ");
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 29 ""
     foreach (var signal in bus.GetBusProperties()) { 
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(": in ");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(il.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 31 ""
     } 
            
            #line default
            #line hidden
            
            #line 32 ""
 } 
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 34 ""
 foreach (var bus in il.OutputOnlyBusses) { 
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("    -- Output bus ");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 36 ""
     foreach (var signal in il.WrittenProperties(bus)) { 
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(": out ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(il.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 38 ""
     } 
            
            #line default
            #line hidden
            
            #line 39 ""
 } 
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 41 ""
 foreach (var bus in il.InputOutputBusses) { 
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write("    -- Input/output bus ");
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 43 ""
     foreach (var signal in bus.GetBusProperties()) { 
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(": in ");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(il.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 45 ""
     } 
            
            #line default
            #line hidden
            
            #line 46 ""
 } 
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("\n    -- Reset signal\n    RST : Std_logic;\n\n    -- Clock signal\n    CLK : Std_logic\n );\nend ");
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( il.ProcessNameToVHDLName() ));
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(";\n\narchitecture RTL of ");
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( il.ProcessNameToVHDLName() ));
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write(" is\n");
            
            #line default
            #line hidden
            
            #line 57 ""
 if (il.TypeDefinitions.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("\n   -- Type definitions\n");
            
            #line default
            #line hidden
            
            #line 60 ""
 } 
            
            #line default
            #line hidden
            
            #line 61 ""
 foreach (var t in il.TypeDefinitions) { 
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write("  ");
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( t ));
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 63 ""
 } 
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 65 ""
 foreach (var bus in il.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write("  -- Internal bus ");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 67 ""
     foreach (var signal in bus.GetBusProperties()) { 
            
            #line default
            #line hidden
            
            #line 68 ""
         if (il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write("  signal ");
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write(": ");
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(il.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 70 ""
         } else { 
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("  signal ");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(", next_");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(": ");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(il.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 72 ""
         } 
            
            #line default
            #line hidden
            
            #line 73 ""
     } 
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 75 ""
 } 
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 77 ""
 if (il.VHDLSignals.Any()) { 
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("  -- Internal signals\n");
            
            #line default
            #line hidden
            
            #line 79 ""
 } 
            
            #line default
            #line hidden
            
            #line 80 ""
 foreach (var s in il.VHDLSignals) { 
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("  signal ");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(s.Key) ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( il.VHDLType(s.Value) ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 82 ""
 } 
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 84 ""
 if (IsComponent) { 
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write("  -- Component declaration and signals\n");
            
            #line default
            #line hidden
            
            #line 86 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ComponentSignals ));
            
            #line default
            #line hidden
            
            #line 86 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 87 ""
 } 
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 89 ""
 if (il.Methods.Any()) { 
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write("  -- Internal methods\n");
            
            #line default
            #line hidden
            
            #line 91 ""
 } 
            
            #line default
            #line hidden
            
            #line 92 ""
 foreach (var s in il.Methods) { 
            
            #line default
            #line hidden
            
            #line 93 ""
     foreach(var line in s) { 
            
            #line default
            #line hidden
            
            #line 94 ""
            this.Write("  ");
            
            #line default
            #line hidden
            
            #line 94 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( line ));
            
            #line default
            #line hidden
            
            #line 94 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 95 ""
     } 
            
            #line default
            #line hidden
            
            #line 96 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 97 ""
 } 
            
            #line default
            #line hidden
            
            #line 98 ""
            this.Write("\n\n\n  -- User defined signals, procedures and components here\n  -- #### USER-DATA-SIGNALS-START\n  -- #### USER-DATA-SIGNALS-END\n\nbegin\n\n    -- #### USER-DATA-PROCESSES-START\n    -- #### USER-DATA-PROCESSES-END\n\n");
            
            #line default
            #line hidden
            
            #line 110 ""
 if (IsComponent) { 
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("    -- Component instantiation\n");
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ComponentProcesses ));
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 113 ""
 } else { 
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write("\n    process(\n");
            
            #line default
            #line hidden
            
            #line 116 ""
     if (il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 117 ""
            this.Write("        -- #### USER-DATA-SENSITIVITY-START\n        -- #### USER-DATA-SENSITIVITY-END\n");
            
            #line default
            #line hidden
            
            #line 119 ""
     } 
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write("        CLK, \n        RST\n    )\n\n");
            
            #line default
            #line hidden
            
            #line 124 ""
     if (il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 125 ""
         if (il.VHDLVariables.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 126 ""
            this.Write("    -- Internal variables\n");
            
            #line default
            #line hidden
            
            #line 127 ""
             foreach(var s in il.VHDLVariables) { 
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(            s ));
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 129 ""
             } 
            
            #line default
            #line hidden
            
            #line 130 ""
         } 
            
            #line default
            #line hidden
            
            #line 131 ""
     } 
            
            #line default
            #line hidden
            
            #line 132 ""
            this.Write("\n    -- #### USER-DATA-CLOCKEDVARIABLES-START\n    -- #### USER-DATA-CLOCKEDVARIABLES-END\n    begin\n\n        -- Shared initialize code here\n        -- #### USER-DATA-CLOCKEDSHAREDINITIALIZECODE-START\n        -- #### USER-DATA-CLOCKEDSHAREDINITIALIZECODE-END\n\n        if RST = '1' then\n");
            
            #line default
            #line hidden
            
            #line 142 ""
     if (il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 143 ""
         foreach(var s in il.VHDLProcessResetStaments) { 
            
            #line default
            #line hidden
            
            #line 144 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 144 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s ));
            
            #line default
            #line hidden
            
            #line 144 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 145 ""
         } 
            
            #line default
            #line hidden
            
            #line 146 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 147 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 148 ""
          foreach(var s in il.VHDLClockResetStaments) { 
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s ));
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 150 ""
          } 
            
            #line default
            #line hidden
            
            #line 151 ""
     } 
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write("            -- Reset code here\n            -- #### USER-DATA-RESETCODE-START\n            -- #### USER-DATA-RESETCODE-END\n\n        elsif rising_edge(CLK) then\n\n            -- Initialize code here\n            -- #### USER-DATA-CLOCKEDINITIALIZECODE-START\n            -- #### USER-DATA-CLOCKEDINITIALIZECODE-END\n\n");
            
            #line default
            #line hidden
            
            #line 162 ""
     if (!il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 163 ""
         foreach (var bus in il.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 164 ""
            this.Write("            -- Propagate internal bus ");
            
            #line default
            #line hidden
            
            #line 164 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 164 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 165 ""
             foreach (var signal in bus.GetBusProperties()) { 
            
            #line default
            #line hidden
            
            #line 166 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 166 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(    signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 166 ""
            this.Write(" <= next_");
            
            #line default
            #line hidden
            
            #line 166 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 166 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 167 ""
             } 
            
            #line default
            #line hidden
            
            #line 168 ""
         } 
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 170 ""
     } 
            
            #line default
            #line hidden
            
            #line 171 ""
     if (il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 172 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 173 ""
     foreach(var line in il.VHDLBody) { 
            
            #line default
            #line hidden
            
            #line 174 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 174 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( line ));
            
            #line default
            #line hidden
            
            #line 174 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 175 ""
     } 
            
            #line default
            #line hidden
            
            #line 176 ""
            this.Write("\n            -- #### USER-DATA-CODE-START\n            -- #### USER-DATA-CODE-END\n\n");
            
            #line default
            #line hidden
            
            #line 180 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 181 ""
            this.Write("\n            -- #### USER-DATA-ONRISE-START\n            -- #### USER-DATA-ONRISE-END\n\n");
            
            #line default
            #line hidden
            
            #line 185 ""
     } 
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write("        end if;\n    end process;\n\n");
            
            #line default
            #line hidden
            
            #line 189 ""
     if (!il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 190 ""
            this.Write("\n    process(\n        -- #### USER-DATA-SENSITIVITY-START\n        -- #### USER-DATA-SENSITIVITY-END\n");
            
            #line default
            #line hidden
            
            #line 194 ""
         foreach(var signal in il.InputBusses.Union(il.ClockedInputBusses).Union(il.InternalBusses).SelectMany(x => x.GetBusProperties()).Select(x => x.ToVHDLName(il.ProcType, null))) { 
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal ));
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 196 ""
         } 
            
            #line default
            #line hidden
            
            #line 197 ""
         foreach(var signal in il.VHDLSignals) { 
            
            #line default
            #line hidden
            
            #line 198 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 198 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(signal.Key) ));
            
            #line default
            #line hidden
            
            #line 198 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 199 ""
         } 
            
            #line default
            #line hidden
            
            #line 200 ""
            this.Write("        RST\n    )\n");
            
            #line default
            #line hidden
            
            #line 202 ""
         if (il.VHDLVariables.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 203 ""
            this.Write("    -- Internal variables\n");
            
            #line default
            #line hidden
            
            #line 204 ""
         } 
            
            #line default
            #line hidden
            
            #line 205 ""
         foreach(var s in il.VHDLVariables) { 
            
            #line default
            #line hidden
            
            #line 206 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 206 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s ));
            
            #line default
            #line hidden
            
            #line 206 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 207 ""
         } 
            
            #line default
            #line hidden
            
            #line 208 ""
            this.Write("\n    -- #### USER-DATA-NONCLOCKEDVARIABLES-START\n    -- #### USER-DATA-NONCLOCKEDVARIABLES-END\n\tbegin\n        -- Initialize code here\n        -- #### USER-DATA-NONCLOCKEDSHAREDINITIALIZECODE-START\n        -- #### USER-DATA-NONCLOCKEDSHAREDINITIALIZECODE-END\n\n        if RST = '1' then\n");
            
            #line default
            #line hidden
            
            #line 217 ""
     foreach(var s in il.VHDLProcessResetStaments) { 
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s ));
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 219 ""
     } 
            
            #line default
            #line hidden
            
            #line 220 ""
            this.Write("\n            -- Initialize code here\n            -- #### USER-DATA-NONCLOCKEDRESETCODE-START\n            -- #### USER-DATA-NONCLOCKEDRESETCODE-END\n        else\n\n");
            
            #line default
            #line hidden
            
            #line 226 ""
     if (!il.IsClockedProcess) { 
            
            #line default
            #line hidden
            
            #line 227 ""
         foreach (var bus in il.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write("            -- Initialize internal bus ");
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 229 ""
             foreach (var signal in bus.GetBusProperties()) { 
            
            #line default
            #line hidden
            
            #line 230 ""
            this.Write("            next_");
            
            #line default
            #line hidden
            
            #line 230 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(    signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 230 ""
            this.Write(" <= ");
            
            #line default
            #line hidden
            
            #line 230 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(il.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 230 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 231 ""
             } 
            
            #line default
            #line hidden
            
            #line 232 ""
         } 
            
            #line default
            #line hidden
            
            #line 233 ""
     } 
            
            #line default
            #line hidden
            
            #line 234 ""
            this.Write("\n            -- Initialize code here\n            -- #### USER-DATA-NONCLOCKEDINITIALIZECODE-START\n            -- #### USER-DATA-NONCLOCKEDINITIALIZECODE-END\n\n\n");
            
            #line default
            #line hidden
            
            #line 240 ""
     foreach(var line in il.VHDLBody) { 
            
            #line default
            #line hidden
            
            #line 241 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 241 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( line ));
            
            #line default
            #line hidden
            
            #line 241 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 242 ""
     } 
            
            #line default
            #line hidden
            
            #line 243 ""
            this.Write("\n        end if;\n\n        -- Non-clocked process actions here\n\n        -- #### USER-DATA-CODE-START\n        -- #### USER-DATA-CODE-END\n\n    end process;\n\n");
            
            #line default
            #line hidden
            
            #line 253 ""
     } 
            
            #line default
            #line hidden
            
            #line 254 ""
 } 
            
            #line default
            #line hidden
            
            #line 255 ""
            this.Write("end RTL;\n\n-- User defined architectures here\n-- #### USER-DATA-ARCH-START\n-- #### USER-DATA-ARCH-END\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class EntityBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
