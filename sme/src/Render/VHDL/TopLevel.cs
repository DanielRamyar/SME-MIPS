// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.Render.VHDL {
    using System.Linq;
    using SME;
    using SME.Render.VHDL;
    using System.Text;
    using System.Collections.Generic;
    using SME.Render.VHDL.ILConvert;
    using System;
    
    
    public partial class TopLevel : TopLevelBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 9 ""
            this.Write("library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.STD_LOGIC_UNSIGNED.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nlibrary SYSTEM_TYPES;\nuse work.SYSTEM_TYPES.ALL;\n\nlibrary CUSTOM_TYPES;\nuse work.CUSTOM_TYPES.ALL;\n\n-- User defined packages here\n-- #### USER-DATA-IMPORTS-START\n-- #### USER-DATA-IMPORTS-END\n\nentity ");
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( AssemblyNameToVHDL ));
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(" is\n  port(\n\n");
            
            #line default
            #line hidden
            
            #line 27 ""
 foreach (var bus in Processes.SelectMany(x => x.AllExternalBusses).Distinct(new TypeDefComp())) { 
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write("    -- Bus ");
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 29 ""
     foreach (var signal in bus.GetBusProperties()) { 
	var signaltype = "inout";
	if (signal.IsTopLevelInput && !signal.IsTopLevelOutput)
		signaltype = "in";
	else if (signal.IsTopLevelOutput && !signal.IsTopLevelInput)
		signaltype = "out";	    

            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(": ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signaltype ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(Information.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 37 ""
     } 
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 39 ""
 } 
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 41 ""
 foreach(var bus in Processes.SelectMany(x => x.ClockedBusses).Distinct(new TypeDefComp())) { 
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write("    -- Clocked bus ");
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.FullName ));
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(" forwarding signals\n");
            
            #line default
            #line hidden
            
            #line 43 ""
     foreach (var signal in bus.GetBusProperties()) { 
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write("_next: inout ");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Renderer.ConvertToValidVHDLName(Information.VHDLType(signal)) ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 45 ""
     } 
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write("            \n");
            
            #line default
            #line hidden
            
            #line 47 ""
 } 
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write("\n\n   \t-- User defined signals here\n    -- #### USER-DATA-ENTITYSIGNALS-START\n    -- #### USER-DATA-ENTITYSIGNALS-END\n\n\t-- Reset signal\n    RST : in Std_logic;\n\n\t-- Clock signal\n\tCLK : in Std_logic\n  );\nend ");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( AssemblyNameToVHDL ));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(";\n\narchitecture RTL of ");
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( AssemblyNameToVHDL ));
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(" is  \n  -- User defined signals here\n  -- #### USER-DATA-SIGNALS-START\n  -- #### USER-DATA-SIGNALS-END\n\nbegin\n\n");
            
            #line default
            #line hidden
            
            #line 69 ""
 foreach (var p in Processes) {
	var buslist = ListSignals(p);

	Mono.Cecil.TypeDefinition curbus = null;
	string curtype = null; 

            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write("\n    -- Entity  ");
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ProcType.FullName ));
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(" signals\n    ");
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ProcessNameToVHDLName() ));
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(": entity work.");
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ProcessNameToVHDLName() ));
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write("\n    port map (\n");
            
            #line default
            #line hidden
            
            #line 79 ""
    foreach (var e in buslist) { 
            
            #line default
            #line hidden
            
            #line 80 ""
        if (curbus != e.Bus || curtype != e.Type) { 
	          curbus = e.Bus;
	          curtype = e.Type;

            
            #line default
            #line hidden
            
            #line 84 ""
            this.Write("\n        -- ");
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( e.Type ));
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write(" bus ");
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( e.Bus.FullName ));
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 86 ""
        } 
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( e.Signal.ToVHDLName(p.ProcType, null) ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(" => ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( e.Signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( IsClockedBus(e.Bus) && p.OutputBusses.Contains(e.Bus) ? "_next" : ""));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 88 ""
    } 
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write("\n        RST => RST,\n        CLK => CLK\n    );\n\n");
            
            #line default
            #line hidden
            
            #line 94 ""
 } 
            
            #line default
            #line hidden
            
            #line 95 ""
            this.Write("\n    -- Propagate all clocked processes\n    process(\n");
            
            #line default
            #line hidden
            
            #line 98 ""
 foreach(var bus in ClockedBusses) { 
            
            #line default
            #line hidden
            
            #line 99 ""
     foreach (var signal in bus.Properties) { 
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("_next,\n");
            
            #line default
            #line hidden
            
            #line 101 ""
     } 
            
            #line default
            #line hidden
            
            #line 102 ""
 } 
            
            #line default
            #line hidden
            
            #line 103 ""
            this.Write("        RST)\n    begin\n        if RST = '1' then\n");
            
            #line default
            #line hidden
            
            #line 106 ""
 foreach(var bus in ClockedBusses) { 
            
            #line default
            #line hidden
            
            #line 107 ""
     foreach (var signal in bus.Properties) { 
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write(" <= ");
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( DefaultValue(signal) ));
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 109 ""
     } 
            
            #line default
            #line hidden
            
            #line 110 ""
 } 
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("        else\n");
            
            #line default
            #line hidden
            
            #line 112 ""
 foreach(var bus in ClockedBusses) { 
            
            #line default
            #line hidden
            
            #line 113 ""
     foreach (var signal in bus.Properties) { 
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write(" <= ");
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.ToVHDLName(TopAssembly, null) ));
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write("_next;\n");
            
            #line default
            #line hidden
            
            #line 115 ""
     } 
            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 117 ""
 } 
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write("        end if;\n    end process;\n\n-- User defined processes here\n-- #### USER-DATA-CODE-START\n-- #### USER-DATA-CODE-END\n\nend RTL;");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class TopLevelBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
